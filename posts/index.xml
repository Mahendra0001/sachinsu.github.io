<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sachin Sunkle</title>
    <link>https://sachinsu.github.io/posts/</link>
    <description>Recent content in Posts on Sachin Sunkle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 04 Jun 2020 10:25:04 +0530</lastBuildDate>
    
	<atom:link href="https://sachinsu.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Web Security Measures in .NET Applications</title>
      <link>https://sachinsu.github.io/posts/websecurity/</link>
      <pubDate>Thu, 04 Jun 2020 10:25:04 +0530</pubDate>
      
      <guid>https://sachinsu.github.io/posts/websecurity/</guid>
      <description>At my current workplace, All Applications are expected to adhere to PCI DSS standards meant for Data protection, Access Regulation and so on. Dedicated SOC Team,consisting of Security analyst who are continously on the prawl to identify breach, conduct periodic auditing of Applications, hardening of Servers.
While all our .NET applications adhere to below guidelines,
 ASP.NET Security Overview Secure Coding Guidelines Security Guidelines by OWASP  We also use tools like Snyk to perform code vulnerability analysis as part of Jenkins driven CI/CD pipeline.</description>
    </item>
    
    <item>
      <title>Is WebAssembly future of Web Development</title>
      <link>https://sachinsu.github.io/posts/webassembly/</link>
      <pubDate>Tue, 02 Jun 2020 10:25:04 +0530</pubDate>
      
      <guid>https://sachinsu.github.io/posts/webassembly/</guid>
      <description>Over the last many years, de-facto language of the Web (specifically front-end) has been Javascript (and variants like Typescript, ECMAScript versions and so on). The Web development has been revolving around HTML+CSS+Javascript trio. It all started with support for Javascript in browsers, followed by addition of XMLHTTP API, Rich DOM Manipulation Support in Javascript. To induce order and apply patterns to Javascript&amp;rsquo;s usage in browsers, numerous frameworks and libraries were introduced like React and Vue among others.</description>
    </item>
    
    <item>
      <title>Using Github Actions for Automated Testing and Deployment</title>
      <link>https://sachinsu.github.io/posts/usinggithubactions/</link>
      <pubDate>Thu, 28 May 2020 10:25:04 +0530</pubDate>
      
      <guid>https://sachinsu.github.io/posts/usinggithubactions/</guid>
      <description>Background The source code of tracfee.com is hosted on Github Private.
At a High level, Tracfee&amp;rsquo;s Architecture involves,
 Single Page Application using VueJS, deployed on Netlify API in Go, deployed on Oracle Cloud  So far, API testing has been automated and we were looking at ways to automate deployment of both UI and API. Steps required to deploy API are less since we are using Docker to run it on VM.</description>
    </item>
    
    <item>
      <title>Windows Service with Cancelable Task</title>
      <link>https://sachinsu.github.io/posts/windowsservicecancellabletask/</link>
      <pubDate>Tue, 05 May 2020 12:25:04 +0530</pubDate>
      
      <guid>https://sachinsu.github.io/posts/windowsservicecancellabletask/</guid>
      <description>Windows Service/Daemon with Long running, Cancelable task Background Recently, we had requirement wherein a process should,
 Periodically (Poll) or Asynchronously (Pub-sub) listen on incoming requests/messages. The whole process is expected to be long running. Should also implement clean disposal of in-flight requests and subsequent cleanup using something similar to Cancelble Context in Go  The first of the objective is somewhat dependent on mechanism (Pub/sub, Listener), protocol (TCP, HTTP etc.</description>
    </item>
    
    <item>
      <title>Optimizing  .NET Code using Benchmarks</title>
      <link>https://sachinsu.github.io/posts/usingbenchmarkdotnet/</link>
      <pubDate>Tue, 05 May 2020 10:25:04 +0530</pubDate>
      
      <guid>https://sachinsu.github.io/posts/usingbenchmarkdotnet/</guid>
      <description>Benchmarking .NET code Background Oftentimes, we come across situation where code does not perform as per expectation. What is typically approch to address it,
 Performance Testing - Visual Studio Load Tests or Third party tools like Locust, Vegeta, Gatling etc. Visual Studio Diagnostics Tools Or Use tools like Perfview/dotTrace/dotMemory to diagnose bottlenecks  What if it is possible to Benchmark code for,
 Set of varying parameter(s) Different runtimes (.</description>
    </item>
    
    <item>
      <title>ASP.NET Core - Mind the SameSite HTTP Cookie settings</title>
      <link>https://sachinsu.github.io/posts/samesitecookies/</link>
      <pubDate>Thu, 09 Apr 2020 10:25:04 +0530</pubDate>
      
      <guid>https://sachinsu.github.io/posts/samesitecookies/</guid>
      <description>Background A Web Application, developed in ASP.NET Core (Runtime Version 3.1.100) using Razor Pages and Web API, is expected to be launched from within third-party Web Application in iframe, with complete HTML being rendered.
During the Development, a mock HTML Page was developed to simulate launching of ASP.NET core based Web Application in iframe. Note that this page as well as Application was hosted on same IIS Server and it worked fine.</description>
    </item>
    
    <item>
      <title>Using Channels for High performance Producer consumer implementation</title>
      <link>https://sachinsu.github.io/posts/channelsforproducerconsumer/</link>
      <pubDate>Wed, 12 Feb 2020 10:25:04 +0530</pubDate>
      
      <guid>https://sachinsu.github.io/posts/channelsforproducerconsumer/</guid>
      <description>Using Channels to implement Producer Consumer pattern Background Recently, i got involved in assignment where in an application was facing issues with throughput. Expectation is to support more than 500 transactions per second while load testing results were indicating system was experiencing high latency beyond 100+ transactions per second.
This application is developed in .NET Framework + .NET Core and primarily uses Relational Database for persistence and has point to point integration (mainly over HTTP) with internal &amp;amp; external application(s).</description>
    </item>
    
    <item>
      <title>Using .NET standard Assembly in .NET core and .NET Framework</title>
      <link>https://sachinsu.github.io/posts/dotnetstandard/</link>
      <pubDate>Fri, 07 Feb 2020 10:25:04 +0530</pubDate>
      
      <guid>https://sachinsu.github.io/posts/dotnetstandard/</guid>
      <description>Using .NET standard Assembly in both .NET core and .NET Framework Background One of the key project(s) at my current organization is developed on .NET 4.6.1. It is developed as Modular Monolith. As part of it&amp;rsquo;s functionality, it supports different channels like Mobiles, Terminals and Web. For the Web channel, there was need to develop a Web application with,
 High availability Lightweight, High throughput (Need to support few thousand(s) active users)  Accordingly, we have been exploring developing this Web Application in .</description>
    </item>
    
  </channel>
</rss>